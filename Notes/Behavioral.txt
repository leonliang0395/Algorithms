- Tell me your biggest weakness as an engineer.
My biggest weakness is not speaking up during team meetings. 
I tend to defer to the opinions of the more senior developerson the team, since I know that they have more context, knowledge, and experience.
We have weekly design reviews and sprint reviews where we show off our work.
I find myself never truly confident in presenting anything, and I really tend to defer to the senior engineers to present.
I've definitely brought this up with my current manager and my past manager, and in my opinion, there could be a couple reasons for this.
I simply am really early in career on a super business logic heavy team where even people who have been on it for a couple years still only really know like 25% of the project.
I also definitely have some sort of impostor syndrome, I'm always double checking my work, doubting my code, even if it runs great with all my unit tests. Sometimes my being careful really slows me down.

- Describe a tricky bug you’ve encountered.
SQL job intermittent failure. Will fail the same job in only one server and not the others.
We would check CPU usage, memory usage.
We would check logs and running processes
We could only debug as it was failing, logs would not give us anything
This was during like 10PM at night when it was my on-call rotation.
Narrowed it down to looking at other running processes, found one process that was locking.

- What’s the biggest project you’ve shipped?
FSA is a huge project.
Unfortunately we were given a deadline that would likely compromise our quality
Mixed messages of following quality, but needing to hit that deadline

- What’s your favorite programming language? Why?
I really like C++ because it's my first language.
I learned it in college, and I really liked how declarative and explicit it is about everything,
The code is clear, although can be really verbose.
I have mixed feelings about the memory management. Managing it yourself gives you a lot of control, but you need to be really careful. Then working with scala with GC, I never realized I didn't worry about memory.

- How do you overcome interpersonal conflicts with coworkers?
Bring it up in retro.
Ask for a one on one with the person.
Try to understand where they're coming from and why they are so passionate and angry.



MSSales

- Revenue Reporting system
- Data Pipeline using Spark and Scala
- Orchestration mainly using Azure Automation Powershell Runbooks
- Ingest data from multiple sources, onprem, cosmos, blob.

- Worked on sharding of data using fiscal months. Worked specifically on the orchestration,
considering rerunnability of the runbook, exponential retries, distribution of fiscal months.

- Worked on new Azure Launches, worked with C+E team, designed new ingestion pipeline and processing given strict deadlines
	- trade off between utilizing old processing in warehouse vs taking time to do more processing in the cloud
	- worked on cleaning data coming in from upstream sources, took into account dedupe, version order checking, orchestration between multiple parts of pipeline
	- considered factors for performance including transfer of data from onpremise to cloud, from cosmos to sql iaas, did POCs with sample data sizes, researched various data 			pull mechanisms.
	- livesite and devops was very important to our team, so I understood fully the pain of having to deal with infrastructure issues, azure services issues, and learned 
		ways to help mitigate those alerts
	- telemetry is super important, have to get it from the beginning, place alerts on LA, app insights, etc.
	- security is paramount, take advantage of keyvault, credscan, gated checkins, fortify builds. doing it earlier will help in the long run.
	- CI/CD makes a developer's life infinitely more enjoyable.
		- nightly build run automatically, or running build taking however many changes are available when it's ready
		- PR builds run only changed modules
		- test cases for literally anything, from powershell to C# code.
		- master is develop, use same release, different environments
		- set up lower environments beforehand.
		- set up local test env