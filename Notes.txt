Sliding Window Technique
- Push end pointer forward to make sum bigger.
- Push start pointer forwrd to make sum smaller.

Common Diff Technique
- Keep track of each sum per index as a rolling sum as you iterate through the array.
- When (currSum - target) is in the map, you've found the two indices for contiguous arr.

DNF
- Three Zones: Low, Mid and High
- Swap with the zone pointers to fill up the zones.

Binary Search
- Make sure you use mid = start + (end - start) / 2 to avoid integer overflow.
- If you're encountering duplicates, you will need to keep searching if mid - 1 is the same as mid.
- If you're trying to find the nearest target, you will need to keep track of the closest mid encountered.

    BS: Cyclically Rotated Arrays Properties
    - Remember that the last element in the array gives you a lot of information.
        - All elements that are rotated and came back around are > lastElement.
        - All elements that have not rotated are < lastElement
    - Also, there should be exactly one element where the value dips. This is the end/beginning border.
    - This does NOT work if the array has duplicates. You will need to do O(N) if there are duplicates.
    
    BS: Looking for an element in a CRA
    - Binary search for the pivot element in O(log(n)) time.
    - If pivot element doesn't exist, do normal BS.
    - Otherwise, this pivot element represents the two sections to BST. Figure out which section the element belongs in
        and just perform binary search on that section.
    
    BS: Looking for an element in a Unknown Length Array
    - Catch the out of bounds exception to find the end of the array
    - After finding end of Array, do regular BST
    - You can improve by checking between prevEnd and currEnd and seeing if the element is between there.

    BS: Finding Square Root of X
    - Do a binary search between 0 and X.
    - If mid * mid > x, search mid - 1.
    - If mid * mid < x, search mid + 1.

    BS: Finding peak of array
    - Basically do binary search with certain properties.
        - If (v[mid] < v[mid + 1]) search (mid + 1, end)
        - If (v[mid] < v[mid - 1]) search (start, mid - 1)
        - If (mid == 0 or mid == size - 1 or (v[mid] >= v[mid - 1] && v[mid] >= v[mid + 1])
            - In the case that mid is the same as both of its sides, then that's the peak, it's just a wide peak.

Auxiliary Buffer for Combination Problems
- The idea is to have a buffer of size N, where N is the size of the combinations you need.
1. Have a termination base case, usually when the buffer is full, log the combination.
2. Find candidates that will go into the buffer.
3. Fill the next buffer slot
4. Recurse to fill next buffer slot.

Auxiliary Buffer for Permutation Problems
- Same idea as for Combination problems, but slightly different as in the step where you find candidates, you need
    to basically loop through the whole array.

    Q: Print all permuatations of length x
    // Termination case
    if (bufferIdx == buffer.size()) {
        printBuffer
        return;
    }

    // Find candidates
    for (int i = 0; i < arr.size(); ++i) {
        // Check if number is already in buffer. If not, add to buffer recursively.
        if (inBuffer[arr[i]].find() == inBuffer.end()) {
            // Put element in buffer
            buffer[bufferIdx] = arr[i];
            // Mark element as in buffer
            inBuffer[arr[i]] = true;
            // Recurse to next bufferIdx
            doFunctionAgain with bufferIdx + 1

            // After recursion is done, remove element in this instance of function from the isInBuffer array.
            inBuffer[arr[i]] = false;
        }
    }
